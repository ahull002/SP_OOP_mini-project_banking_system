class Bank:

    name = 'Springboard Federal Credit Union'
    clients = []
    valid_account_types= ['checking', 'savings']

    def validate_client(self, client):
        """This function validates the account type and initial deposit entered by the user.
        
        Parameters
        ----------
        self : is the autogenerated index in the database to house client details.
        client : is the client details from the client file.
        
        Returns
        ----------
        Returns a printed statement if account is not valid.
        Returns a printed statement if the user tries to pull a balance less than 0.
        """
        account_type = client.account['account_type']
        if (account_type not in self.valid_account_types):
            print("Not a valid account_type")
            return False
        balance = client.account['balance']
        if (balance <= 0.0):
            print("you must have a positive balance to create an account")
            return False
        return True

    def update_db(self, client):
        """This function updates the internal memory database with clients account information.
        
        Parameters
        ----------
        self : is the autogenerated index in the database to house account details.
        client : is the client details from the client file.
        
        Returns
        ----------
        Stores account details and returns the account information for indexing later.
        """
        if (self.validate_client(client)):
            self.clients.append(client)
            return True
        else:
            print("can not create account, one or more information are not correct")
            return False

    def authentication(self, name, account_number):
        """This function validates users credentials to allow retrieval of information later.
        
        Parameters  
        ----------
        name : takes in the full name of the account holder as a str.
        account_number : is the autogenerated random account_number from client.py file
        
        Returns
        ----------
        Stores account details and returns the account information for indexing later.
        """
        for i in range(len(self.clients)):
            client = self.clients[i]
            if (name == client.account['name']) and (account_number == client.account['account_number']):
                print()
                print("Authentication successful!")
                print("==========================================")
                return self.clients[i]
